{"version":3,"sources":["my_2048/game.cljs"],"mappings":";AAEA,iCAAA,2CAAA,iDAAA,oFAAA,IAAA,IAAA,IAAA,KAAA,IAAA,IAAA,IAAA,KAAA,IAAA,IAAA,KAAA,KAAA,IAAA,IAAA,KAAA,aAAA,qDAAA,oFAAA,KAAA,KAAA,IAAA,IAAA,KAAA,KAAA,IAAA,IAAA,KAAA,IAAA,IAAA,IAAA,KAAA,IAAA,IAAA,YAAA,uDAAA,oFAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,IAAA,IAAA,KAAA,KAAA,KAAA,lsBAAKA;AAKL,gCAAA,hCAAMC,wEAAkBC;AAAxB,AACE,IAAAC,WAAgBD;IAAhBE,aAAAD;IAAAE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;QAAAE,JAAQM;SAARR,LAAYS;UAAZ,NAAwBC;AAAxB,AAAA,IAAAZ,eAAAA;IAAwBY,UAAAA;;AAAxB,AAAA,IAAAL,aAAAP;IAAAQ,aAAA,AAAAL,cAAAI;IAAAE,eAAA,AAAAJ,gBAAAG;IAAAA,iBAAA,AAAAF,eAAAE;YAAAC,RAAQC;aAARF,TAAYG;IAAYC,UAAAA;AAAxB,AACE,IAAMC,KAAG,AAACC,+CAAOC,eAAKH,QAAIF;AAA1B,AACE,GAAI,WAAA,VAAMC;AACRE;;AACA,eAAOF;eAAGE;;;;;;;;AAElB,+BAAA,/BAAMG,sEAAWC;AAAjB,AACI,OAACC,eAAKC,sBAAM,AAACC,4CAAIC,mBAAGJ,IAAI,AAACK,eAAKL;;AAElC,+BAAA,/BAAMM,sEAAWN;AAAjB,AACE,OAACC,eAAKM,sBAAMP;;AAEd,gCAAA,wCAAAQ,xEAAMG;AAAN,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAmBG;QAAnB,AAAAF,4CAAAD,WAAA,IAAA,/DAAqBI;AAArB,AACE,SACE,EAAK,KAAA,JAAGD,cAAK,CAAIA,MAAEC,UACnB,EAAK,OAAA,NAAOD,gBAAG,CAAGC,IAAED;;AAExB,oCAAA,pCAAME,gFAAgBd;AAAtB,oDACO,AAACG,4CAAIY,eAAKf,IAAI,AAACK,eAAKL,lIACvB,OAACC,eAAKU;;AAEV,mCAAA,nCAAMK,8EAAeC;AAArB,AACE,OAAChB,eAAKa,kCAAeG;;AAEvB,4BAAA,5BAAMC,gEAAclB;AAApB,AACE,UAAA,NAAOL;IAAQK,UAAIA;;AAAnB,AACE,IAAAmB,aAA4BnB;IAA5BoB,aAAA,AAAAlC,cAAAiC;IAAAE,eAAA,AAAAjC,gBAAAgC;IAAAA,iBAAA,AAAA/B,eAAA+B;QAAAC,JAAO5B;IAAP6B,aAAAF;IAAAG,aAAA,AAAArC,cAAAoC;IAAAE,eAAA,AAAApC,gBAAAmC;IAAAA,iBAAA,AAAAlC,eAAAkC;QAAAC,JAAYC;SAAZF,LAAgB7B;SAAhB4B,LAAuBI;AAAvB,AACE,GACE,MAAA,LAAMD;AAAG,OAACE,6CAAKhC,IAAIK;;AADrB,GAEE,CAAIP,MAAEgC;AAAG,eAAO,AAACG,6CAAKjC,IAAI,CAAA,MAAKF;eAAIC;;;;;AAFrC,AAGQ,eAAO,AAACkC,6CAAKjC,IAAIF;eAAGiC;;;;;;;;;;AAElC,0BAAA,1BAAMG,4DAAY7B;AAAlB,AACE,OAAC8B,cAAI,iBAAAC,qBAAA,gDAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAhD,cAAA8C;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAC,6BAAAH;AAAA,IAAAI,kBAm6E4C,AAAA6G,sBAAAjH;IAn6E5CK,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,QAAA,AAAAK,eAAAN,gBAAAK,nCAAMQ;AAAN,AAAA,GAAkB,kDAAA,lDAACC,gDAAKD;AAAxB,AAAA,AAAAN,uBAAAJ,SAA8BU;;AAA9B,eAAA,CAAAR,WAAA;;;;AAAA,eAAA,CAAAA,WAAA;;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,sCAAA,AAAAC,qBAAAf;;AAAA,OAAAY,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,QAAA,AAAAnD,gBAAA4C,pBAAMiB;AAAN,AAAA,GAAkB,kDAAA,lDAACC,gDAAKD;AAAxB,OAAAD,iBAAA,AAAAF,sCAAA,AAAAzC,eAAA2B,vDAA8BiB;;AAA9B,eAAA,AAAA5C,eAAA2B;;;;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAQ/B;;;AAEf,0BAAA,1BAAMmD,4DAAYnD;AAAlB,AACI,IAAMoD,MAAI,AAACd,gBAAMtC;IACXqD,QAAM,CAAA,MAAKD;IACXE,SAAO,qDAAA,rDAACC,+CAAOF;AAFrB,AAGE,OAACxD,+CAAOC,eAAKE,IAAIsD;;AAEvB,0BAAA,1BAAME;AAAN,AACE,IAAMC,IAAE,AAACC;AAAT,AACE,GAAI,MAAA,LAAID;AAAR;;AAAA;;;AAEJ,8BAAA,9BAAME,oEAAgBC,KAAKC;AAA3B,AACE,IAAMC,WAAS,AAACC,oDAAYC,iBAAOJ;IAC7BK,UAAQ,iBAAAlC,qBAAA,oDAAAmC;AAAA,AAAA,YAAAjC,kBAAA,KAAA;AAAA,AAAA,IAAAiC,eAAAA;;AAAA,AAAA,IAAAhC,qBAAA,AAAAhD,cAAAgF;AAAA,AAAA,GAAAhC;AAAA,AAAA,IAAAgC,eAAAhC;AAAA,AAAA,GAAA,AAAAC,6BAAA+B;AAAA,IAAA9B,kBAq5EmC,AAAA6G,sBAAA/E;IAr5EnC7B,qBAAA,AAAAC,gBAAAF;IAAA+B,WAAA,AAAA3B,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAA+B,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA/B;AAAA,IAAAgC,aAAA,AAAA3B,eAAAN,gBAAAgC;QAAA,AAAA1D,4CAAA2D,WAAA,IAAA,/DACJG;WADI,AAAA9D,4CAAA2D,WAAA,IAAA,lEACFI;AADE,AAAA,oBACmB,CAACZ,oCAAAA,0CAAAA,RAAIY,sBAAAA;AADxB,AAAA,AAAA9B,uBAAAwB,SAC+BK;;AAD/B,eAAA,CAAAJ,WAAA;;;;AAAA,eAAA,CAAAA,WAAA;;;;;AAAA;;;;;AAAA,OAAAxB,qBAAA,AAAAC,gBAAAsB,UAAA,AAAAG,0CAAA,AAAAvB,qBAAAmB;;AAAA,OAAAtB,qBAAA,AAAAC,gBAAAsB,UAAA;;;AAAA,IAAAI,aAAA,AAAAnF,gBAAA8E;QAAA,AAAAxD,4CAAA6D,WAAA,IAAA,/DACJC;WADI,AAAA9D,4CAAA6D,WAAA,IAAA,lEACFE;AADE,AAAA,oBACmB,CAACZ,oCAAAA,0CAAAA,RAAIY,sBAAAA;AADxB,OAAAzB,iBAAA,AAAAsB,0CAAA,AAAAjE,eAAA6D,3DAC+BM;;AAD/B,eAAA,AAAAnE,eAAA6D;;;;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAnC,mBACI+B;;AAFlB,AAGE,oBAAI,AAAC7D,eAAKyE,wBAAQT;AAChB,OAACU,mBAASV;;AADZ;;;AAGJ,AAAKW,oCACH,AAACC,gDAAQ5E,eAAKM;AAEhB,8BAAA,9BAAMuE,oEAAgB7D;AAAtB,AACE,IACG8D,YAAU,AAACpB,4BAAe1C,KAAK2D;AADlC,AAEE,GAAI,OAASG;AAAb,0FACGA,UAAU,AAACpB,4BAAe,CAAC1C,qCAAAA,gDAAAA,bAAK8D,4BAAAA,YAAWxE;;AAD9C;;;AAGJ,2BAAA,3BAAMyE,8DAAapB,KAAKqB,MAAMC;AAA9B,AACE,IAAMpB,WAAS,AAACC,oDAAYC,iBAAOJ;AAAnC,AACE,OAAC9B,cAAI,iBAAAC,qBAAA,iDAAAoD;AAAA,AAAA,YAAAlD,kBAAA,KAAA;AAAA,AAAA,IAAAkD,eAAAA;;AAAA,AAAA,IAAAjD,qBAAA,AAAAhD,cAAAiG;AAAA,AAAA,GAAAjD;AAAA,AAAA,IAAAiD,eAAAjD;AAAA,AAAA,GAAA,AAAAC,6BAAAgD;AAAA,IAAA/C,kBAq4E0C,AAAA6G,sBAAA9D;IAr4E1C9C,qBAAA,AAAAC,gBAAAF;IAAAgD,WAAA,AAAA5C,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAgD,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAhD;AAAA,IAAAiD,aAAA,AAAA5C,eAAAN,gBAAAiD;QAAA,AAAA3E,4CAAA4E,WAAA,IAAA,/DAAOG;WAAP,AAAA/E,4CAAA4E,WAAA,IAAA,lEAASb;AAAT,AAAA,AAAA,AAAA9B,uBAAAyC,SACH,EAAI,AAACM,6CAAED,EAAER,QAAOC,SAAST;;AADtB,eAAA,CAAAY,WAAA;;;;AAAA;;;;;AAAA,OAAAzC,qBAAA,AAAAC,gBAAAuC,UAAA,AAAAG,uCAAA,AAAAxC,qBAAAoC;;AAAA,OAAAvC,qBAAA,AAAAC,gBAAAuC,UAAA;;;AAAA,IAAAI,aAAA,AAAApG,gBAAA+F;QAAA,AAAAzE,4CAAA8E,WAAA,IAAA,/DAAOC;WAAP,AAAA/E,4CAAA8E,WAAA,IAAA,lEAASf;AAAT,AAAA,OAAAzB,uFAAA,AAAAuC,uCAAA,AAAAlF,eAAA8E,9HACH,EAAI,AAACO,6CAAED,EAAER,QAAOC,SAAST;;;AADtB;;;;GAAA,KAAA;;AAAA,AAAA,OAAA1C,mBAAe+B;;;AAGxB,4BAAA,5BAAM6B,gEAAc1E,KAAK2E;AAAzB,AACE,IAAAC,aAAYD;QAAZ,AAAAlF,4CAAAmF,WAAA,IAAA,/DAAOpG;QAAP,AAAAiB,4CAAAmF,WAAA,IAAA,/DAASpE;IACHzB,MAAI,CAACiB,qCAAAA,wCAAAA,LAAKxB,oBAAAA;IACVyF,WAAS,AAAC1B;IACVsC,UAAQ,AAACd,yBAAYhF,IAAIyB,EAAEyD;AAHjC,AAII,OAACF,yBAAY/D,KAAKxB,EAAEqG;;AAE1B,AAAKC,0BACH,AAACC,6CAAK7C,wBAAWjC,0BAAaW;AAEhC,AAAKoE,2BACH,AAACD,6CAAK,AAACnB,gDAAQqB,eAAKpE,eAAK,oEAAA,pEAAC+C,gDAAQsB;AAEpC,+BAAA,/BAAMC,sEAAiBC,UAAUC;AAAjC,AACE,IAAMC,aAAW,CAAC3H,+DAAAA,0EAAAA,bAAkByH,sDAAAA;AAApC,AACE,IAAAtE,qBAAA,qDAAAyE;AAAA,AAAA,YAAAvE,kBAAA,KAAA;AAAA,AAAA,IAAAuE,eAAAA;;AAAA,AAAA,IAAAtE,qBAAA,AAAAhD,cAAAsH;AAAA,AAAA,GAAAtE;AAAA,AAAA,IAAAsE,eAAAtE;AAAA,AAAA,GAAA,AAAAC,6BAAAqE;AAAA,IAAApE,kBAm3E+C,AAAA6G,sBAAAzC;IAn3E/CnE,qBAAA,AAAAC,gBAAAF;IAAAqE,WAAA,AAAAjE,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAqE,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAArE;AAAA,eAAA,AAAAK,eAAAN,gBAAAsE,1CAAME;AAAN,AAAA,AAAA,AAAAjE,uBAAA8D,SACE,AAACI,4CAAIP,WAAWM;;AADlB,eAAA,CAAAF,WAAA;;;;AAAA;;;;;AAAA,OAAA9D,qBAAA,AAAAC,gBAAA4D,UAAA,AAAAE,2CAAA,AAAA5D,qBAAAyD;;AAAA,OAAA5D,qBAAA,AAAAC,gBAAA4D,UAAA;;;AAAA,eAAA,AAAArH,gBAAAoH,3BAAMI;AAAN,AAAA,OAAA5D,gFAAA,AAAA2D,2CAAA,AAAAtG,eAAAmG,3HACE,AAACK,4CAAIP,WAAWM;;;AADlB;;;;GAAA,KAAA;;AAAA,AAAA,OAAA7E,mBAAewE;;AAGnB,2BAAA,3BAAMO,8DAAaT,UAAUpF;AAA7B,AACE,GAAI,uDAAA,vDAACyE,6CAAEW;AACLpF;;AACA,qBAAA,8FAAKA,9BACHpC,vCACA,uCAAA,vCAACuH,6BAAgBC,tDACjBJ,dACAnE;;;AAEN,2BAAA,3BAAMiF,8DAAa9F,KAAKoF;AAAxB,AACI,aAAA,WAAAW,pBAAME;AAAN,AAAc,0CAAAF,nCAACF,yBAAYT;;kBAA3B,WAAAY,zBACME;AADN,AACmB,4EAAAF,rEAACG,6CAAKrB;;IACnBsB,eACE,EAAI,uDAAA,vDAAC3B,6CAAEW,iEACL,AAACc,YAAYlG,MACb,OAAA,YAAA,OAAKA,PACHiG,ZACAC,PACAD;IACNI,YAAU,AAACxC,4BAAeuC;AAThC,AAUE,oBAAIC;AACF,OAAC3B,0BAAa0B,aAAaC;;AAC3BD;;;AAER,0BAAA,1BAAME;AAAN,AACE,UAAA,mFAAA,IAAA,IAAA,IAAA,rGACIvH;IACA0H,QAAM,AAAC5F,cAAI,+CAAA,/CAACyB,mDAASvD;gBAFzB,ZAGI2H;AAHJ,AAGe,oDAAA,7CAACC,iDAAO,AAACC,kBAAQ,8CAAA,9CAACC;;IAHjCN,aAIY,AAACG;SAJb,AAAAjH,4CAAA8G,WAAA,IAAA,hEAIKO;SAJL,AAAArH,4CAAA8G,WAAA,IAAA,hEAIQQ;IAJRP,aAKY,AAACE;SALb,AAAAjH,4CAAA+G,WAAA,IAAA,hEAKKQ;SALL,AAAAvH,4CAAA+G,WAAA,IAAA,hEAKQS;AALR,2DAMMR,1BACF,gCAAA,hCAAC/B,mHAAcoC,GAAGE,vJAClB,mKAAA,5JAACtC,+OAAcqC,GAAGE;;AAExB,yBAAA,zBAAMC,0DAAWT;AAAjB,AACE,QAAA,WAAAU,fAAMC;AAAN,AAAS,sEAAAD,/DAACE,8CAAMC;;AAAhB,AAAsB,OAACF,EAAE,AAAClI,4CAAIkI,EAAEX;;AAElC,2BAAA,3BAAMc,8DAAOvH;AAAb,AACE,yBAAA,WAAAwH,hCACEE;AADF,AACgB,IAAAC,mBAAI,6BAAAH,7BAACnI;AAAL,AAAA,oBAAAsI;AAAAA;;AAAmB,oCAAAH,7BAAC1I;;;IAClC8I,eAAa,yBAAA,zBAAC/B,0EAAgB7F;4BAFhC,WAAAyH,nCAGEI;AAHF,AAGmB,mDAAAJ,5CAACK,yBAASJ;;AAH7B,AAIE,SACE,AAACG,sBAAgB7H,WACjB,AAAC6H,sBAAgBD;;AAEvB,0BAAA,1BAAMG,4DAAM/H;AAAZ,AACE,IAAMqF,aAAW,AAACzH,8BAAiBoC;AAAnC,AACI,OAAChB,eAAK,mEAAA,nEAAC4E,gDAAQzE,2BAASa","names":["my-2048.game/field-transitions","my-2048.game/matrix-to-vector","matrix","G__20966","vec__20967","seq__20968","cljs.core/seq","first__20969","cljs.core/first","cljs.core/next","vec__20974","seq__20975","first__20976","x","xs","res","el","cljs.core.reduce","cljs.core/conj","my-2048.game/has-pair?","row","cljs.core/some","cljs.core/true?","cljs.core.map","cljs.core/==","cljs.core/rest","my-2048.game/has-zero?","cljs.core/zero?","p__21004","vec__21005","cljs.core.nth","my-2048.game/can-merge?","a","b","my-2048.game/row-shiftable?","cljs.core/list","my-2048.game/grid-movable?","grid","my-2048.game/collapse-row","vec__21026","seq__21027","first__21028","vec__21029","seq__21030","first__21031","y","ys","cljs.core.into","cljs.core.conj","my-2048.game/del-zeroes","cljs.core/vec","iter__5523__auto__","s__21034","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__21036","cljs.core/chunk-buffer","i__21035","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__21033","cljs.core/chunk-rest","cljs.core/cons","c","cljs.core.not_EQ_","my-2048.game/add-zeroes","len","delta","zeroes","cljs.core.repeat","my-2048.game/get-2-or-4","p","cljs.core.rand","my-2048.game/get-rand-index","coll","fun","coll-map","cljs.core.map_indexed","cljs.core/vector","indexes","s__21057","b__21059","i__21058","vec__21061","iter__21056","vec__21064","i","item","cljs.core/number?","cljs.core/rand-nth","my-2048.game/contains-zero?","cljs.core.partial","my-2048.game/get-empty-cell","row-index","my-2048.game/update-coll","index","new-item","s__21112","b__21114","i__21113","vec__21125","iter__21111","vec__21144","n","cljs.core._EQ_","my-2048.game/add-new-item","cell","vec__21148","new-row","my-2048.game/update-row","cljs.core.comp","my-2048.game/divide-by-4","cljs.core/mapv","cljs.core/partition","my-2048.game/field-transform","direction","game-field","transition","s__21153","b__21155","i__21154","iter__21152","cell-num","cljs.core.get","my-2048.game/rotate-grid","my-2048.game/update-grid","p1__21167#","p1__21168#","rotate","update-rows","cljs.core.mapv","shifted-grid","free-cell","my-2048.game/init-state","vec__21177","vec__21180","state","rand-pair","cljs.core.take","cljs.core/shuffle","cljs.core.range","x1","x2","y1","y2","my-2048.game/get-score","p1__21187#","f","cljs.core.apply","cljs.core/+","my-2048.game/lose?","p1__21195#","p1__21196#","movable-row?","or__5045__auto__","rotated-grid","unmovable-grid?","cljs.core/not-any?","my-2048.game/win?","cljs.core/chunk-first"],"sourcesContent":["(ns my-2048.game)\n\n(def field-transitions\n  { :up  [0 4 8 12 1 5 9 13 2 6 10 14 3 7 11 15]\n    :down [15 11 7 3 14 10 6 2 13 9 5 1 12 8 4 0]\n    :right [3 2 1 0 7 6 5 4 11 10 9 8 15 14 13 12]})\n\n(defn matrix-to-vector [matrix]\n  (loop [[x & xs] matrix, res []]\n    (let [el (reduce conj res x)]\n      (if (nil? xs)\n        el\n        (recur xs el)))))\n\n(defn has-pair? [row]\n    (some true? (map == row (rest row))))\n\n(defn has-zero? [row]\n  (some zero? row))\n\n(defn can-merge? [[a b]]\n  (or\n    (and (> a 0) (== a b))\n    (and (zero? a) (> b a))))\n\n(defn row-shiftable? [row]\n  (->> (map list row (rest row))\n    (some can-merge?)))\n\n(defn grid-movable? [grid]\n  (some row-shiftable? grid))\n\n(defn collapse-row [row]\n  (loop [res [], row row]\n    (let [[x & [y & xs :as ys]] row]\n      (cond\n        (nil? y) (into res row)\n        (== x y) (recur (conj res (* 2 x)) xs)\n        :else (recur (conj res x) ys)))))\n\n(defn del-zeroes [row]\n  (vec (for [c row :when (not= c 0)] c)))\n\n(defn add-zeroes [row]\n    (let [len (count row)\n          delta (- 4 len)\n          zeroes (repeat delta 0)]\n      (reduce conj row zeroes)))\n\n(defn get-2-or-4 []\n  (let [p (rand)]\n    (if (>= p 0.95) 4 2)))\n\n(defn get-rand-index [coll fun]\n  (let [coll-map (map-indexed vector coll)\n        indexes (for \n          [[i item] coll-map :when (fun item)] i)]\n    (if (some number? indexes)\n      (rand-nth indexes))))\n\n(def contains-zero?\n  (partial some zero?))\n\n(defn get-empty-cell [grid]\n  (let \n    [row-index (get-rand-index grid contains-zero?)]\n    (if (number? row-index)\n      [row-index (get-rand-index (grid row-index) zero?)])))\n\n(defn update-coll [coll index new-item]\n  (let [coll-map (map-indexed vector coll)]\n    (vec (for [[n item] coll-map]\n      (if (= n index) new-item item)))))\n\n(defn add-new-item [grid cell]\n  (let [[x y] cell\n        row (grid x)\n        new-item (get-2-or-4)\n        new-row (update-coll row y new-item)]\n      (update-coll grid x new-row)))\n\n(def update-row\n  (comp add-zeroes collapse-row del-zeroes))\n\n(def divide-by-4 \n  (comp (partial mapv vec) (partial partition 4)))\n\n(defn field-transform [direction game-field]\n  (let [transition (field-transitions direction)]\n    (for [cell-num transition]\n      (get game-field cell-num))))\n\n(defn rotate-grid [direction grid]\n  (if (= direction :left)\n    grid\n    (->> grid\n      matrix-to-vector\n      (field-transform direction)\n      divide-by-4\n      vec)))\n\n(defn update-grid [grid direction] \n    (let [rotate #(rotate-grid direction %1) \n          update-rows #(mapv update-row %1)\n          shifted-grid\n            (if (= direction :left)\n              (update-rows grid)\n              (->> grid\n                rotate \n                update-rows \n                rotate))\n          free-cell (get-empty-cell shifted-grid)]\n      (if free-cell\n        (add-new-item shifted-grid free-cell)\n        shifted-grid)))\n\n(defn init-state []\n  (let [\n      row [0 0 0 0]\n      state (vec (repeat 4 row))\n      rand-pair #(take 2 (shuffle (range 4)))\n      [x1 x2] (rand-pair)\n      [y1 y2] (rand-pair)]\n    (-> state\n      (add-new-item [x1 y1])\n      (add-new-item [x2 y2]))))\n\n(defn get-score [state]\n  (let [f #(apply + %)] (f (map f state))))\n\n(defn lose? [grid]\n  (let [\n    movable-row? #(or (has-zero? %1) (has-pair? %1))\n    rotated-grid (rotate-grid :up grid)\n    unmovable-grid? #(not-any? movable-row? %1)]\n    (and \n      (unmovable-grid? grid)\n      (unmovable-grid? rotated-grid))))\n\n(defn win? [grid]\n  (let [game-field (matrix-to-vector grid)]\n      (some (partial == 2048) grid)))\n"]}