{"version":3,"sources":["my_2048/core.cljs"],"mappings":";;AAOA,AAAKA,oBACH,wBAAA,xBAAiBC;AAEnB,AAAKC,2BAAY,wBAAA,xBAAiBD;AAElC,AAAKE,yBACH,iBAAMC,IAAE,AAAcC;IAChBC,IAAE,AAAeD;AADvB,AAEE,QAAA,MAAO,iBAAAE,kBAAKH;IAALI,kBAAOF;AAAP,AAAA,SAAAC,kBAAAC,mBAAAD,kBAAAC;;;AAEX,AAAKC,yBACH,sBAAA,WAAAC,hBAAME;AAAN,AAAU,QAAAF,mBAAA;;SAAV,WAAAC,hBACME;AADN,AACU,QAAAF,mBAAA;;AADV,AAEE,UAAA,GAAI,AAASX,HAAMY,HAAGC;;AAE1B,AAAKC,0BACH,6BAAA,7BAAad;AAEf,2BAAA,3BAAMe,8DAAaC;AAAnB,AACE,AAACC,2BAAejB;;mOACXgB,9BACDE,tHACA,sHAAA,tHAACC,4CAAIC,eAAK,kDAAA,IAAA,tDAACC,2BAAeZ,rKAC1B,OAACa,yBAAaR,wBAAWL;;AAE/B,4BAAA,5BAAMc,gEAAcC;AAApB,AACE,QAAM,AAAetB,uCAAasB;;AAEpC,AAAKC,0BACH,AAACC,6CAAK,AAACC;AAET,AAAKC,qBACH,AAACF,6CAAK,uBAAA,AAAAG,vBAACC,uCAAaL;AAEtB,kCAAA,lCAAMM,4EAAeC;AAArB,AACM,YAAA,WAAAC,nBACEC;AADF,AACS,gCAAAD,zBAACE,0CAAiBH;;AAD3B,AAEE,oBAAI,iBAAAI,oBACEJ;AADF,AAAA,oBAAAI;AAEE,2FAAMX,nDACJ,mCAAA,AAAAI,nCAACQ,yBAAcL,1DACfM;;AAJJF;;;AAKF,OAACG,mDAAMd,wBAAWS;;AALpB;;;AAOR,oBAAA,pBAAMM;AAAN,AACC,AACC,AAAY,AAACC,qCAAkBV;;AAC/B,AAAY,AAACW,yBAAiB1C,6BAAM+B;;AAEpC,2GAAA,3GACE,wFAAA,xFAACY,kDAAa,wBAAA,xBAAiB1C;AADjC,AAEG,AAAI,OAAC2C,sBAAOnB,wBAAW,AAACE;;;AAE3B,4CAAA,6DAAA,WAAAkB,iBAAAC,iBAAAC,iBAAAC,vKAACC,oBAAUxB;AAAX,AACG,AACE,yBAAAuB,zBAACjC;;AACD,AAACwB,mDAAMX,mBAAM;AAAA,AAAO,8BAAAoB,vBAAClB;;;AACrB,iCAAA,AAAAD,1BAACN,0CAAcK;;;AAEpB,4CAAA,mEAAA,WAAAsB,iBAAAC,iBAAAC,iBAAAC,7KAACJ,oBAAUxB;AAAX,AACG,iBAAA4B,bAAMrC;AAAN,AACG,oBACE,AAACsC,wBAAOtC;AACN,aAAA,NAACuC;;AAFL,GAGE,AAACC,yBAAQxC;AACP,aAAA,NAACuC;;AAJL;;;;;AAMN,yBAAA,AAAA1B,zBAACd,yCAAaU;;AACd,iCAAA,AAAAI,1BAACN,0CAAcK","names":["my-2048.core/game","js/document","my-2048.core/score-label","my-2048.core/grid-size","w","js/window","h","x__5133__auto__","y__5134__auto__","my-2048.core/tile-size","p1__11729#","p1__11730#","f1","f2","my-2048.core/background","my-2048.core/render-game","game-state","my-2048.utils/clear-canvas","my-2048.game/matrix-to-vector","cljs.core.map","cljs.core/list","my-2048.utils/get-vertexes","my-2048.utils/draw-field","my-2048.core/render-score","new-score","my-2048.core/game-state","cljs.core.atom","my-2048.game/init-state","my-2048.core/score","cljs.core/deref","my-2048.game/get-score","my-2048.core/update-field!","direction","p1__11731#","shift","my-2048.game/update-grid","and__5043__auto__","my-2048.game/rotate-grid","my-2048.game/grid-movable?","cljs.core.swap_BANG_","my-2048.core/main","my-2048.swipe/arrowSwipe","my-2048.swipe/touchSwipe","js/module$node_modules$rxjs$dist$cjs$index.fromEvent","cljs.core/reset!","p1__11733#","p2__11734#","p3__11735#","p4__11732#","cljs.core/add-watch","p1__11737#","p2__11738#","p3__11739#","p4__11736#","my-2048.game/win?","js/alert","my-2048.game/lose?"],"sourcesContent":["(ns my-2048.core\n  (:require [my-2048.utils :as u]\n    [my-2048.game :as g]\n    [rxjs :as rx]\n    [my-2048.swipe :as swipe]\n    ))\n\n(def game \n  (.getElementById js/document \"game\"))\n\n(def score-label (.getElementById js/document \"score\"))\n\n(def grid-size\n  (let [w (.-innerWidth js/window)\n        h (.-innerHeight js/window)]\n    (* 0.8 (min w h))))\n\n(def tile-size\n  (let [f1 #(- %1 9)\n        f2 #(/ %1 4)]\n    (-> (.-width game) f1 f2)))\n\n(def background \n  (.getContext game \"2d\"))\n\n(defn render-game [game-state]\n  (u/clear-canvas game)\n  (->> game-state\n      g/matrix-to-vector\n      (map list (u/get-vertexes tile-size 4 3))\n      (u/draw-field background tile-size)))\n\n(defn render-score [new-score] \n  (set! (.-textContent score-label) new-score))\n\n(def game-state\n  (atom (g/init-state)))\n\n(def score\n  (atom (g/get-score @game-state)))\n\n(defn update-field! [direction] \n      (let [\n        shift #(g/update-grid %1 direction)]\n        (if (and \n              direction \n              (->> @game-state\n                (g/rotate-grid direction)\n                g/grid-movable? ))\n          (swap! game-state shift))))\n\n(defn main []\n (do \n  (.subscribe (swipe/arrowSwipe) update-field!)\n  (.subscribe (swipe/touchSwipe game) update-field!)\n  ;; (.subscribe (swipe/touchSwipe js/document) update-field!)\n  (.subscribe \n    (rx/fromEvent (.getElementById js/document \"newgamebtn\") \"click\") \n    #(do (reset! game-state (g/init-state))))\n\n  (add-watch game-state :updating\n    #(do \n       (render-game %4)\n       (swap! score (fn [] (g/get-score %4)))\n       (render-score @score)))\n\n  (add-watch game-state :game-ending\n    #(let [game-state %4]\n        (cond \n          (g/win? game-state)\n            (js/alert \"You won!\")\n          (g/lose? game-state)\n            (js/alert \"You lost!\"))))\n  \n  (render-game @game-state)\n  (render-score @score)))\n"]}