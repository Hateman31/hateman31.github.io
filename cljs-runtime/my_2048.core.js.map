{"version":3,"sources":["my_2048/core.cljs"],"mappings":"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","names":["my-2048.core/game","js/document","my-2048.core/score-label","my-2048.core/grid-size","w","js/window","h","x__5133__auto__","y__5134__auto__","my-2048.core/tile-size","p1__11523#","p1__11524#","f1","f2","my-2048.core/background","my-2048.core/render-game","game-state","my-2048.utils/clear-canvas","my-2048.game/matrix-to-vector","cljs.core.map","cljs.core/list","my-2048.utils/get-vertexes","my-2048.utils/draw-field","my-2048.core/render-score","new-score","my-2048.core/game-state","cljs.core.atom","my-2048.game/init-state","my-2048.core/prev-game-state","my-2048.core/score","cljs.core/deref","my-2048.game/get-score","my-2048.core/ignore-ending","my-2048.core/win-msg","my-2048.core/lose-msg","my-2048.core/update-field!","direction","p1__11525#","shift","my-2048.game/update-grid","and__5043__auto__","my-2048.game/rotate-grid","my-2048.game/grid-movable?","cljs.core.swap_BANG_","my-2048.core/undobtn","my-2048.core/start-new-game","cljs.core/reset!","my-2048.core/finish-game","cljs.core.repeat","my-2048.core/main","my-2048.swipe/arrowSwipe","my-2048.swipe/touchSwipe","js/module$node_modules$rxjs$dist$cjs$index.fromEvent","p1__11528#","p2__11529#","p3__11527#","p4__11526#","cljs.core/add-watch","cljs.core.println","my-2048.game/win?","p1__11531#","p2__11532#","p3__11533#","p4__11530#","cljs.core/not","continue?","js/confirm","my-2048.game/lose?"],"sourcesContent":["(ns my-2048.core\n  (:require [my-2048.utils :as u]\n    [my-2048.game :as g]\n    [rxjs :as rx]\n    [my-2048.swipe :as swipe]\n    ))\n\n(def game \n  (.getElementById js/document \"game\"))\n\n(def score-label (.getElementById js/document \"score\"))\n\n(def grid-size\n  (let [w (.-innerWidth js/window)\n        h (.-innerHeight js/window)]\n    (* 0.8 (min w h))))\n\n(def tile-size\n  (let [f1 #(- %1 9)\n        f2 #(/ %1 4)]\n    (-> (.-width game) f1 f2)))\n\n(def background \n  (.getContext game \"2d\"))\n\n(defn render-game [game-state]\n  (u/clear-canvas game)\n  (->> game-state\n      g/matrix-to-vector\n      (map list (u/get-vertexes tile-size 4 3))\n      (u/draw-field background tile-size)))\n\n(defn render-score [new-score] \n  (set! (.-textContent score-label) new-score))\n\n(def game-state\n  (atom (g/init-state)))\n\n(def prev-game-state\n  (atom []))\n\n(def score\n  (atom (g/get-score @game-state)))\n\n(def ignore-ending\n  (atom false))\n\n(def win-msg\n  \"You won! Do you want to continue?\")\n\n(def lose-msg\n  \"You lost! Do you want to play new game?\")\n\n(defn update-field! [direction] \n      (let [\n        shift #(g/update-grid %1 direction)]\n        (if (and \n              direction \n              (->> @game-state\n                (g/rotate-grid direction)\n                g/grid-movable? ))\n            (swap! game-state shift))))\n\n(def undobtn\n  (.getElementById js/document \"undobtn\"))\n\n(defn start-new-game []\n  (do\n    (reset! game-state (g/init-state))\n    (set! (.-disabled undobtn) true)))\n\n(defn finish-game []\n  (do \n    (render-game (repeat 4 [0 0 0 0]))))\n\n(defn main []\n (do\n   (set! (.-disabled undobtn) true)\n  ;;  (println @game-state)\n   (.subscribe (swipe/arrowSwipe) update-field!)\n   (.subscribe (swipe/touchSwipe game) update-field!)\n  ;; (.subscribe (swipe/touchSwipe js/document) update-field!)\n   (.subscribe\n      (rx/fromEvent (.getElementById js/document \"newgamebtn\") \"click\")\n      #(start-new-game))\n\n   (.subscribe\n      (rx/fromEvent undobtn \"click\")\n      #(do (reset! game-state @prev-game-state)\n          (set! (.-disabled undobtn) true)))\n\n   (add-watch game-state :updating\n      #(do\n          (println @ignore-ending (g/win? %4))\n          (render-game %4)\n          (reset! prev-game-state %3)\n          (set! (.-disabled undobtn) false)\n          (swap! score (fn [] (g/get-score %4)))\n          (render-score @score)))\n\n   (add-watch game-state :game-ending\n      #(let [game-state %4]\n          (cond\n            (and (not @ignore-ending) (g/win? game-state))\n              (let [continue? (js/confirm win-msg)]\n                (if continue?\n                  (swap! ignore-ending (fn [] continue?))\n                  (finish-game)))\n            (g/lose? game-state)\n              (if (js/confirm lose-msg) \n                (do (start-new-game))\n                (do (finish-game))))))\n\n   (render-game @game-state)\n   (render-score @score)))\n"]}