{"version":3,"sources":["my_2048/core.cljs"],"mappings":";;AAOA,AAAKA,oBACH,wBAAA,xBAAiBC;AAEnB,AAAKC,2BAAY,wBAAA,xBAAiBD;AAElC,AAAKE,yBACH,iBAAMC,IAAE,AAAcC;IAChBC,IAAE,AAAeD;AADvB,AAEE,QAAA,MAAO,iBAAAE,kBAAKH;IAALI,kBAAOF;AAAP,AAAA,SAAAC,kBAAAC,mBAAAD,kBAAAC;;;AAEX,AAAKC,yBACH,sBAAA,WAAAC,hBAAME;AAAN,AAAU,QAAAF,mBAAA;;SAAV,WAAAC,hBACME;AADN,AACU,QAAAF,mBAAA;;AADV,AAEE,UAAA,GAAI,AAASX,HAAMY,HAAGC;;AAE1B,AAAKC,0BACH,6BAAA,7BAAad;AAEf,2BAAA,3BAAMe,8DAAaC;AAAnB,AACE,AAACC,2BAAejB;;mOACXgB,9BACDE,tHACA,sHAAA,tHAACC,4CAAIC,eAAK,kDAAA,IAAA,tDAACC,2BAAeZ,rKAC1B,OAACa,yBAAaR,wBAAWL;;AAE/B,4BAAA,5BAAMc,gEAAcC;AAApB,AACE,QAAM,AAAetB,uCAAasB;;AAEpC,AAAKC,0BACH,AAACC,6CAAK,AAACC;AAET,AAAKC,+BACH,6CAAA,7CAACF;AAEH,AAAKG,qBACH,AAACH,6CAAK,uBAAA,AAAAI,vBAACC,uCAAaN;AAEtB,kCAAA,lCAAMO,4EAAeC;AAArB,AACM,YAAA,WAAAC,nBACEC;AADF,AACS,gCAAAD,zBAACE,0CAAiBH;;AAD3B,AAEE,oBAAI,iBAAAI,oBACEJ;AADF,AAAA,oBAAAI;AAEE,2FAAMZ,nDACJ,mCAAA,AAAAK,nCAACQ,yBAAcL,1DACfM;;AAJJF;;;AAKF,OAACG,mDAAMf,wBAAWU;;AALpB;;;AAOR,AAAKM,uBACH,wBAAA,xBAAiBxC;AAEnB,oBAAA,pBAAMyC;AAAN,AACC,AACC,iCAAA,hCAAM,AAAYD;;AAElB,AAAY,AAACE,qCAAkBX;;AAC/B,AAAY,AAACY,yBAAiB5C,6BAAMgC;;AAEpC,2GAAA,3GACE,wFAAA,xFAACa,kDAAa,wBAAA,xBAAiB5C;AADjC,AAEK,AACC,AAAC6C,sBAAOrB,wBAAW,AAACE;;AACpB,wCAAA,hCAAM,AAAYc;;;AAExB,0FAAA,1FACE,uEAAA,vEAACI,kDAAaJ;AADhB,AAEK,AAAI,8CAAA,AAAAX,9CAACgB,sBAAOrB,wCAAYG;;AACvB,gHAAA,AAAAE,zGAACiB,yHAASnB;;;AAEhB,4CAAA,6DAAA,WAAAoB,iBAAAC,iBAAAC,iBAAAC,vKAACC,oBAAU3B;AAAX,AACG,AACE,yBAAA0B,zBAACpC;;AACD,mDAAAmC,nDAACJ,sBAAOlB;;AACR,iCAAA,hCAAM,AAAYa;;AAClB,AAACD,mDAAMX,mBAAM;AAAA,AAAO,8BAAAsB,vBAACpB;;;AACrB,iCAAA,AAAAD,1BAACP,0CAAcM;;;AAEpB,4CAAA,mEAAA,WAAAwB,iBAAAC,iBAAAC,iBAAAC,7KAACJ,oBAAU3B;AAAX,AACG,iBAAA+B,bAAMxC;AAAN,AACG,oBACE,AAACyC,wBAAOzC;AACN,aAAA,NAAC0C;;AAFL,GAGE,AAACC,yBAAQ3C;AACP,aAAA,NAAC0C;;AAJL;;;;;AAMN,yBAAA,AAAA5B,zBAACf,yCAAaU;;AACd,iCAAA,AAAAK,1BAACP,0CAAcM","names":["my-2048.core/game","js/document","my-2048.core/score-label","my-2048.core/grid-size","w","js/window","h","x__5133__auto__","y__5134__auto__","my-2048.core/tile-size","p1__11936#","p1__11937#","f1","f2","my-2048.core/background","my-2048.core/render-game","game-state","my-2048.utils/clear-canvas","my-2048.game/matrix-to-vector","cljs.core.map","cljs.core/list","my-2048.utils/get-vertexes","my-2048.utils/draw-field","my-2048.core/render-score","new-score","my-2048.core/game-state","cljs.core.atom","my-2048.game/init-state","my-2048.core/prev-game-state","my-2048.core/score","cljs.core/deref","my-2048.game/get-score","my-2048.core/update-field!","direction","p1__11938#","shift","my-2048.game/update-grid","and__5043__auto__","my-2048.game/rotate-grid","my-2048.game/grid-movable?","cljs.core.swap_BANG_","my-2048.core/undobtn","my-2048.core/main","my-2048.swipe/arrowSwipe","my-2048.swipe/touchSwipe","js/module$node_modules$rxjs$dist$cjs$index.fromEvent","cljs.core/reset!","cljs.core.println","p1__11941#","p2__11942#","p3__11940#","p4__11939#","cljs.core/add-watch","p1__11944#","p2__11945#","p3__11946#","p4__11943#","my-2048.game/win?","js/alert","my-2048.game/lose?"],"sourcesContent":["(ns my-2048.core\n  (:require [my-2048.utils :as u]\n    [my-2048.game :as g]\n    [rxjs :as rx]\n    [my-2048.swipe :as swipe]\n    ))\n\n(def game \n  (.getElementById js/document \"game\"))\n\n(def score-label (.getElementById js/document \"score\"))\n\n(def grid-size\n  (let [w (.-innerWidth js/window)\n        h (.-innerHeight js/window)]\n    (* 0.8 (min w h))))\n\n(def tile-size\n  (let [f1 #(- %1 9)\n        f2 #(/ %1 4)]\n    (-> (.-width game) f1 f2)))\n\n(def background \n  (.getContext game \"2d\"))\n\n(defn render-game [game-state]\n  (u/clear-canvas game)\n  (->> game-state\n      g/matrix-to-vector\n      (map list (u/get-vertexes tile-size 4 3))\n      (u/draw-field background tile-size)))\n\n(defn render-score [new-score] \n  (set! (.-textContent score-label) new-score))\n\n(def game-state\n  (atom (g/init-state)))\n\n(def prev-game-state\n  (atom []))\n\n(def score\n  (atom (g/get-score @game-state)))\n\n(defn update-field! [direction] \n      (let [\n        shift #(g/update-grid %1 direction)]\n        (if (and \n              direction \n              (->> @game-state\n                (g/rotate-grid direction)\n                g/grid-movable? ))\n          (swap! game-state shift))))\n\n(def undobtn\n  (.getElementById js/document \"undobtn\"))\n\n(defn main []\n (do \n  (set! (.-disabled undobtn) true)\n\n  (.subscribe (swipe/arrowSwipe) update-field!)\n  (.subscribe (swipe/touchSwipe game) update-field!)\n  ;; (.subscribe (swipe/touchSwipe js/document) update-field!)\n  (.subscribe \n    (rx/fromEvent (.getElementById js/document \"newgamebtn\") \"click\") \n      #(do \n        (reset! game-state (g/init-state))\n        (set! (.-disabled undobtn) true)))\n  \n  (.subscribe \n    (rx/fromEvent undobtn \"click\") \n      #(do (reset! game-state @prev-game-state)\n        (println @prev-game-state)))\n\n  (add-watch game-state :updating\n    #(do \n       (render-game %4)\n       (reset! prev-game-state %3)\n       (set! (.-disabled undobtn) false)\n       (swap! score (fn [] (g/get-score %4)))\n       (render-score @score)))\n\n  (add-watch game-state :game-ending\n    #(let [game-state %4]\n        (cond \n          (g/win? game-state)\n            (js/alert \"You won!\")\n          (g/lose? game-state)\n            (js/alert \"You lost!\"))))\n  \n  (render-game @game-state)\n  (render-score @score)))\n"]}